[day14]

1. 싱글턴 Singleton (싱글 인스턴스)
 고정으로 사용할 기능을 여러 객체를 생성할 필요 없이 호출하여 사용하는 하나의클래스객체만 존재한다. 
예시) 공용 화장실을 필요한갯수만큼 만들진 않는다.
		
	1) 싱글턴의 구성 요소
		1 - 자기 클래스 타입의 private static 변수 (객체 생성해 초기화)
			private static 클래스명 instance = new 클래스명();

			외부에서 객체생성 못하니 내 안에 미리 만들기,
			자기 자신 타입으로 객체생성하므로 무한로딩에 빠지지 않게
			한번만 로딩되도록 static 붙혀 클래스 변수로 만든다.
			함부로 외부에서 변수값  수정 못하게 private 해놓고

		2 - private 생성자
			private 클래스명() { .... }

			외부에서 이 클래스 객체 생성 못하게
			생성자에 private 붙히기

		3 - instance의 get메소드 생성해서 공개		
			public static 클래스명 getInstance () { 
				return instance;
			}

			객체생성 못하니  static 붙혀 클래스 변수로 만들어
			클래스명.~~ 접근가능하게 해놓고 public으로 전체공개를 한다.
			필요한 곳에 get으로 기능을 가져다 쓰는것만 가능

2. 내부 클래스 inner class , nested class
	클래스 내부에 또 다른 클래스를 정의하는 것.
	이유 : 은닉화를 위해 사용

	1) 구조
		class 외부클래스 {
			외부 변수 ; 외부 메소드 () {}		

			class 내부 클래스 {
				내부 변수
				내부 메소드() {}
			}
		}

	2) 종류 : 클래스 정의 위치에 따라 구분
		1) 멤버 클래스
			1 - 인스턴스 멤버 클래스
				: A클래스 객체를 생성해야함 사용할 수 있는 B 내부클래스
			class A {
				class B {
					B() {}
					int x;
					void method(){}
					//  static int y;	---인스턴스 요소만가능
					//  static void method2() {}
				}
			}
			# 객체 생성 & 사용
			A a = new A();
			A.B b = a.new B();
			b.x = 10;
			b.method();

			2 - static 멤버 클래스
				: A클래스를 통해 바로 접근 가능한 B 내부 클래스
			class A {
				static class B {
					B() {}
					int x;
					void method(){}
					static int y;	
					static void method2() {}
				}
			}	
			# 객체 생성 & 사용
			new A.B();
			A.B b = new A.B ();
			b.x = 10;
			b.method();
			A.B.y = 20;
			A.B.method2();
			# 멤버 클래스도 하나의 클래스이므로
			컴파일하면 바이트코드 파일 (.class) 별도로 생성
				A$B.class

		2) 로컬(지역) 클래스
			메소드 안에 정의
			class A {
				void method() {
					class B {
						B() {}
						int x;
						void method(){}
						//  static int y;	---인스턴스 요소만가능
						//  static void method2() {}
					}
					# 객체 생성 & 사용
					B b = new B();
					b.x = 10;
					b.method();
				}
			}	
			A$1 B.class		


3. 익명 클래스 annoymous class        : 이름이 없는 클래스
		
	클래스를 정의하고 동시에 객체 생성해서 사용.

	변수의 초기값, 지역변수의 초기값, 매개변수의 매개값으로 주로 대입됨.
	이벤트처리할때나 스레드 객체를 간편하게 생성할 목적으로 많이 활용됨.
	단독으로 생성 불가, 클래스를 상속하거나 인터페이스를 구현해야 생성가능.

	1) 구조
		new 클래스명() {
			// 클래스정의
		}
		new 인터페이스 () {
		
		}

4. 예외 처리 Exception handling	*** 매우 중요 ***
	: 코드로 발생할수있는 에러를 미리 진단하고, 해결방안을 처리해 놓는것.
	- 컴파일 에러 : 컴파일 할때 에러발생 ( 실행조차X ) : 문법 오류 등
	- 런타임 에러 : 실행하다 발생 : 문법적으로는 맞아 컴파일은 되는데 실행하다 발생

	1) 예외는 메소드에서 처리.
	2) try-catch 구문

		try {
			// 예외가 발생할것 같은 코드들.....
		}catch ( NullPointerException e ) {
			// 예외 발생하면 대처해야할 코드들....
		}catch ( ArrayIndexOutOfBounds e ) {
			// 예외 발생하면 대처해야할 코드들....
		}catch ( Exception e ) {
			// 예외 발생하면 대처해야할 코드들....
		}

	3) 대표적인 예외
		ArrayIndexOutOfBoundsException : 배열 인덱스번호 잘못 쓰면
		ArithemticException 	: 0으로 나눌려고 할때
		NullPointerException	: 객체 생성안하고 내용물 사용하려고 할때
		NumberFormatException	: 문자열이 나타내는 숫자와 일치하지 않는 
					타입의 숫자로 변환시
		ClassCastException		: 클래스 형변환 에러
		ClassNotFoundException 	: 찾는 클래스가 없을 경우
		IOException		: 입출력 동작 실패 또는 인터럽트 시 발생
		illegarArgumentException	: 인자 전달 실패시
		
	4) fanally
		예외 발생 여부와 상관없이 무조건 실행되는 블럭
		메소드안에서 return을 만나도 finally 블럭이 있으면
		실행하고 return됨.
		
		
		try {
			// 예외가 발생할것 같은 코드들.....
		}catch ( NullPointerException e ) {
			// 예외 발생하면 대처해야할 코드들....
		}finally {
			// 예외 발생 여부 상관없이 무조건 실행되어야하는 코드들....
		}

	5) 예외 발생시키는 키워드  
	
		throw 예외객체;

		Exception e = new Exception();
		throw e;   // 예외 발생이야~~~