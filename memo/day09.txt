[day09]

1. 재귀호출 recursive call
	메서드 안에서 자기자신을 호출하는 것을 말함.

2. 메소드 오버로딩 method overloading
	
	1) 한 클래스 내에, 이름이 같지만 매개변수의 타입이나 갯수가 서로 다른
		여러개의 메소드를 중복 작성 가능.
		자바 다형성의 한 경우.

	2) 조건
		1. = 메소드의 이름이 같아야한다.
		2. = 매개변수의 갯수 또는 데이터 타입이 서로 달라야한다.

		주의 - 매개변수의 이름이 다른것은 조건에 해당 안됨;
			리턴타입도 오버로딩 조건에 해당 안됨.
		 
3. 생성자 constructor
	1) 객체가 생성될때, 객체의 초기화를 위해 사용되는 메소드.
		모든 클래스에는 생성자가 있으며, 생성자가 기술이 안되어있으면
		"기본생성자"가 눈에는 안보이지만 자동으로 아무것도 없는 형태로
		만들어지고 호출된다.
		객체 생성시 자동으로 한번만 호출되는 메소드.
	
	2) 초기화 3가지 방식

		#1. 생성자 : 인스턴스 변수를 초기화 할 때 많이 사용
			
		#2. 초기화 블럭 : 클래스 블럭 / 인스턴스 블럭
			 초기화 블럭도 인스턴스 변수를 초기화 할때 사용될수 있는데
			생성자와 블럭 둘다 있으면 실행 순서가 블럭이 먼저다. 
	
			* 구조 *
			# 클래스 블럭
			static{
				// 초기화 코드 작성....
			}
			# 인스턴스 블럭
			{
				// 초기화 코드 작성
			}

		#3. 명시적 초기화
			int a = 10;
	3) 생성자 선언 및 활용
		- 객체가 생성되는 순간에 new를 통해 자동으로 단 한번만 호출된다.
			(반면, 메서드는 필요할때마다 호출가능)
		- 생성자의 이름은 반드시 클래스 이름과 동일
		- 리턴타입 존재하지 않는다 (return; 키워드는 사용가능)
		- 매개변수 지정 가능.
		- 생성자는 오버로딩 할 수 있다.
		- 목적은 객체 생성시, 필요한 초기 작업을 하기 위함이다.
			변수 초기화, 필요한 메모리 확보, 파일 열기,
			네트워크 연결 등 객체 활동전 필요한 초기 준비시 이용

	4) 구조 
		클래스명(타입 파라미터, ....){
			// 초기화 시키는 코드들....
		}


4. 기본생성자 default constructor

	1) 매개변수없는 생성자
		클래스명(){ .. }
	2) 클래스는 생성자가 하나이상은 반드시 존재한다.
		객체 생성시, 반드시 한번 실행
		클래스에 작성된 생성자가 하나도 없으면
		컴파일러가 자동으로 내용없는 기본생성자를 추가하고 실행해서 객체생성한다.

	3) 기본생성자가 자동으로 생성되는 경우
	4) 기본생성자가 자동으로 생성되지 않는 경우	
		매개변수 있는 생성자가 작성되어 있을 경우,
		컴파일러는 기본생성자를 만들어 주지 않는다.