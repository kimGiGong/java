[day17]

1. 입출력 : java.io 패키지
	io = I/O = input/output

2. File 클래스 : java.io.File
	: 크기, 생성, 삭제, 변경 등등
	입출력X

	1) 생성자
	File (String pathname)	: 파일확장자명을 포함한 전체 경로나 디렉토리를  문자열로 주며 생성
	File(File parent, String child)	: parent(부모)디렉토리안에 child이름의 서브디렉토리나 파일을 나타내는 객체 생성
	File(String parent, String child)	: parent(부모)디렉토리안에 child이름의 서브디렉토리나 파일을 나타내는 객체 생성
	File(URI uri)		: file:URI를 추상경로명으로 변환하여 객체 생성

	2) 객체 생성
	File 참조변수명 = new File("전체 경로");
		
		c: 
			[ temp ]
				- test.txt
		File f = new File("c:\\temp\\test.txt");
		File f = new File("c:\\temp", "test.txt");
		*파일은 확장자명까지 표기

	3) 주요 메서드
	boolean		mkdir()		: 새로운 디렉토리 생성		
	boolean		createNewFile()	: 빈 파일 생성. 생성하려는 파일이 이미 존재하면 생성X
	String[]		list()		: 디렉토리 내의 파일과 서브디렉토리 목록을 배열로 리턴
	File[]		listFiles()		: 디렉토리 내의 파일과 서브디렉토리 목록을 File 객체배열로 리턴
	boolean 		delete()		: 파일 또는 디렉토리 삭제
	boolean 		renameTo(File dest)	: dest 경로명으로 파일 이름(경로) 변경
	long		length()		: 파일 크기 리턴
	String 		getPath		: 경로 문자열로 리턴
	String		getAbsolutePath()	: 절대경로를 문자열로 리턴
	String		getParent		: 파일이나 디렉토리의 부모디렉토리 이름 리턴
	String		getName()	: 파일 또는 디렉토리의 이름 문자열로 리턴	
	boolean		isFile()		: 파일이면 true
	boolean 		isDirectory()	: 디렉토리면 true
	long		lastModified()	: 마지막으로 수정한 시간 리턴
	boolean		exists		: 파일 또는 디렉토리가 존재하면 true

	
3. Stream 스트림 : 연속적인 데이터의 흐름
	: 데이터가 돌아다니는 통로(선) -> 데이터를 목적지로 i/o 하기 위한 방법.
	
	- 스트림은 다른 목적지로 데이터를 보낼때 가장 중요한 역할을 한다.
	- 스트림은 단방향 : iput 따로 output 따로
	- 자바 응용프로그램은 입력스트림과 출력스트림과만 연결하고,
	  입출력 장치 제어하고 실질적인 입출력처리는 스트림이 진행한다.

	입력장치 or 파일 ----->입력 스트림 ---------> 자바응용프로그램
	출력장치 or 파일 <---- 출력 스트림 <--------- 자바응용프로그램

 	- 스트림을 통해 흘러가는 기본단위는 바이트나 문자이다.
		자바 스트림객체는 바이트단위로 입출력하는 바이트 스트림과
		문자단위로 입출력하는 문자 스트림(Reader, Writer)으로 나뉜다.
		바이트 스트림을 다루는 클래스는 공통적으로 뒤에 Stream 붙고
		문자 스트림을 다루는 클래스는 공통적으로 뒤에 Reader/Writer가 붙어 구분가능.

	- close() : 스트림을 열었으면 사용후 반드시 닫아줘야 메모리 누수가 안된다.

4. 바이트 스트림
	- 바이트 단위로 데이터 전송 (바이너리 데이터가 흐르는 스트림)
	- 다양한 클래스 제공으로 용도에 맞게 골라 사용
	- 이미지, 동영상 등 전송 가능

	1) InputStream, OutputStream
		: 추상 클래스(객체생성X). 바이트 단위 입출력 처리를 위한 공통기능을 가진 수퍼 클래스
		
	2) FileOutputStream
		: 파일에 출력을 하기위한 클래스
		파일에 바이너리 데이터를 저장할 수 있다.
		바이너리 파일은 사람이 읽고 해석하는 것이 거의 불가능.

		#1. 생성자
		FileOutputStream(File file)			: file이 지정하는 파일에 출력 스트림 생성 (덮어쓰기)
		FileOutputStream(String name)		: name이 지정하는 파일에 출력 스트림 생성(덮어쓰기)
		FileOutputStream(File file, boolean append)	: append(추가)가 true면 파일 마지막부터 데이터저장
							  (기존의 내용 뒤에 추가로 이어 쓰기 한다.)
		FileOutputStream(String name , boolean append) 	: append(추가)가 true면 파일 마지막부터 데이터저장
							  (기존의 내용 뒤에 추가로 이어 쓰기 한다.)

		#2. 주요 메서드 	
		void	write(int b)			: int형으로 넘겨진 바이트 한개 출력
		void	write(byte[] b)			: 배열 b의 바이트를 모두 출력
		void	write(byte[] b, int offset, int len)	: len 크기만큼 offset 부터 배열 b를 출력
		void	flush()			        : 출력 스트림에 남아있는 바이너리 데이터 모두 내보내기
		void 	close()				: 출력스트림 닫고, 관련된 시스템 자원 해제

	3) FileInputStream
		: 바이트 스트림으로 파일 읽는 스트림 클래스

		#1. 생성자
		FileInputStream(File file)	: file 이 지정하는 파일로부터 읽어오는 스트림 생성
		FileInputStream(String name)	: name이 지정하는 파일로부터 읽어오는 스트림 생성

		#2. 주요 메서드
		int	read()		: 입력스트림에서 한 바이트 읽어 int형으로 리턴
		int	read(byte [] b)	: 최대 배열 b의 크기만큼 바이트를 읽음
		int	available()		: 현재 읽을 수 있는 바이트 수 리턴
		void 	close()		: 스트림 닫고 관련 시스템 자원 해제

		# EOF : End Of File 	 : 파일의 끝
			read() 할때 EOF를 만나면 -1을 리턴

		* read()의 리턴이 int형인 이유
		byte 0xFF(-1)
		byte값 -1 int로 리턴 : 0x000000FF 리턴		byte값의 16진수 bit
		EOF -1 리턴 :  0xFFFFFFFF 리턴		int 값의 16진수 bit
		# 16진수로 보았을때 EOF와 byte의 -1이 다르다.
		

	4) DataInputStream / DataOutputStream
		: boolean, char, byte 등 기본타입의 값을 바이너리 형태로 출력.
		바이너리 형태를 기본값으로 읽어옴.
		각 자료형에 맞는 값들을 입력/출력할 수 있는 메서드들이 존재

	5) ObjectInputStream / ObjectOutputStream
		: 객체를 스트림에 입/출력하는데 사용하는 클래스
		보조 스트림으로 사용
		

5.문자 스트림
	- 자바에서는 char형이 2byte이기 때문에, 한글과 같은 2byte 문자는
	바이트 스트림으로 전송시 깨지는 경우가 있다.
	이러한 점을 보완하기 위해 문자 스트림 제공.
	- 문자화되지 않는 바이너리 값은 처리 불가 > 이미지 같은것 처리 불가.
	- 클래스들의 이름이 Reader/Writer로 끝남.
	- 메서드 리턴타입을 잘 보면 byte[] 이 아니고 char[] 을 사용하는것을 볼 수 있다.
	
	1) Reader / Writer
		: 문자스트림 클래스들의 부모. 추상클래스
		
		바이트 스트림 사용 : new 바이트 스트림 클래스 ();
		문자 스트림 사용 : new 문자스트림클래스(new 바이트 스트림); -> 사용
	
	2) OutputStreamWriter	// 보조 스트림으로 byte스트림과 같이 사용
		: 파일에 텍스트데이터를 저장할 때 생성자 호출시 인코딩 지정하여 처리
		인코딩을 지정하지 않으면 OS에서 디폴트로 사용하는 인코딩으로 데이터 저장.

		#1. 생성자 (api 문서 참고)
			charset = encoding : 문자셋

		#2. 주요 메서드 ( byte 스트림 참고 )
		String	getEncoding()	: 인코딩값 리턴
		void	flush()		: 스트림 비우기 (닫기전에 호출하기)

	3) InputStreamReader	// 보조 스트림으로 byte스트림과 같이 사용
		: byte 스트림을 문자 스트림으로 연결시켜주는 역할을 하는 보조 스트림
		byte 스트림의 데이터를 지정된 인코딩의 문자 데이터로 변환하는 작업 수행

		#1. 생성자 ( api 문서 참고 )
		#2. 주요 메서드( byte스트림 참고)
		String	getEncoding()	: 인코딩값 리턴

		# 윈도우에서 사용하는 인코딩
		MS949 : 마이크로소프트사에서 한글 국가 표준 코드를 확장해서
			MS949라 불리는 코드 체계를 만들고
			윈도우 기본 문자 체계로 사용함.

	4) BufferedReader
		: 버퍼를 이용해서 입력의 효율을 높일 수 있도록 해주는 역할
		readLine()	을 사용해서 데이터를 라인단위로 읽어 올 수 있다.
			
		BufferedReader + InputStreamReader -> Scanner

		
6. OS 
	: 하나의 소프트웨어로, 소프트웨어들을 관리하는 소프트웨어(App)
	windows, linux, IOS, android, unix, macOS

	자바 -> JVM : 자바 App을 관리하는 소프트웨어

7. Thread 스레드

	1) 프로세스 process 
		현재 실행중인 프로그램이다.
		프로그램이 실행하면 OS로 부터 실행에 필요한 자원(메모리)를 할당받아
		프로세스가 된다.
		프로세스 = 프로그램을 수행하는데 필요한 메모리같은 자원 + 스레드
			자원을 이용하여 "실제로 작업을 수행하는것이 스레드"이다.
		싱글 프로세스 = 하나의 프로그램을 돌리기위해 1개 프로세스가 실행되는것.
		멀티 프로세스 = 하나의 프로그램을 돌리기위해 여러 프로세스가 실행되는것.

	2) 멀티 태스킹 multi-tasking : multi + tasking
		태스크 Task = 프로세스가 하는 일
		태스킹 = 프로세스가 일을 하는것
		멀티태스킹 = 하나의 프로세스가 여러일을 하는 것

	3) 스레드 thread 
		하나의 태스크를 수행하는 일꾼
		프로세스 = 공장(자원+일꾼), 스레드 = 일꾼
		싱글스레드 = 자원 + 일꾼
		멀티스레드 = 자원 + 일꾼+일꾼......

		둘 이상의 스레드를 가지고 있는것을 
		멀티스레드 프로세스(multi-thread process)라 부른다.

		하나의 프로세스가 가질 수 있는 스레드의 갯수는 제한되어있지는 않으나
		스레드가 작업을 수행하는데 개별적인 메모리공간을 필요로 하므로
		프로세스의 메모리 한계에 따라 셍성될 수 있는 스레드의 수가 결정된다.
	
	4) 멀티태스킹과 멀티스래딩
		멀티태스킹을 실현하기 위한 2가지 방법
		- 멀티프로세싱 : 하나의 프로그램을 여러개의 프로세스로 구성
			-> 각 프로세스가 하나의 작업을 처리하도록
			-> 단점 : 프로세스간 변수 공유 X -> 통신으로 공유해야함
			통신이 어렵고, 문맥교환에 따른 과독한 작업량 소요될수......
				
		- 멀티 스레딩 : 하나의 프로그램을 동시 처리가능하게 작업을 분할하고
			작업의 개수만큼 스레드를 생성, 스레드 하나당 하나의 작업을 처리하게함.	
			자원과 메모리 공유, 문맥교환 빠름

			활동분야
			- 웹서버 시스템 : 
			- 워드, 한컴

	5) 자바의 멀티스레딩
		JVM - > 자바 프로그램 로딩 대부분 JVM이 대신해줌

8. 스레드 만들기

	# 개발자가 할 일
	1) 스레드 할일 코드로 작성
	2) JVM에게 스레드 생성하고 코드 실행하도록 요청

	# 구현방법
	1) Thread 클래스 상속 :
	2) Runnable 인터페이스 구현

	1) Thread 클래스 상속받아 스레드 만들기
		java.lang.Thread
			
		#1. 생성자 (문서 참고)
		#2. 주요 메서드
		void		run()		: JVM에 의해 호출(핵심 메서드)
						스레드가 해야할 작업을 구현해놓는 매서드
						개발자는 반드시 이 메서드 오버라이딩하여
						스레드가 할 일을 코드로 작성 해야함.
						이 메서드가 종료하면 스레드도 종료.

		void		start()		: JVM에게 스레드 실행하도록 요청하는 메서드
		void		interrupt()		: 스레드 강제종료
		static void	yield()		: 다른 스레드에게 실행을 양보.
		void		join()		: 스레드 종료 할 때까지 기다린다.
		long		getId()		: 스레드의 id값 리턴
		String		getName()	: 스레드의 이름 리턴
		int		getPriority	: 스레드의 우선순위값 리턴. 1~10 사이값
		void		setPriority(int n)	: 스레드의 우선순위값 n으로 변경
		Thread.State	getState()		: 스레드의 상태값 리턴
		static void	sleep(long mills)	: mills 밀리초 동안 스레드 잠재우기
		static Thread	currentThread()	: 현재 실행중인 스레드 객체의 레퍼런스 리턴
		
		#1. 스레드 클래스 상속받은 클래스 작성
		#2. run() 메서드 오버라이딩 : 스레드가 할일 작성
		#3. 스레드 객체 생성
		#4. 스레드 시작 : start() 호출

	2) Runnable 인터페이스 구현
		java.lang.Runnable

	#1. Runnable 인터페이스 구현하는 클래스 선언
	#2. run() 오버라이딩 : 스레드가 할일 작성
	#3. 객체생성
		Thread th = new Thread (new 우리가만든클래스명());
	#4. 스레드 시작 : start()
	
9. 스레드 생명 주기 
	1) 스레드 상태
		Thread Life Cycle : 스레드 생명 주기 갖고 있고, 상태 6가지로 표현.
		
		NEW		: 스레드 탄생. new Thread()
		RUNNABLE	: 스레드가 현재 실행되고 있거나, 실행 준비되어 스케줄링 기다리는 상태
		TIMED_WAITING	: 스레드가 sleep(n) 을 호출하여 n 밀리초 동안 기다리면서 멈춘상태.
		BLOCK		: 스레드가 I/O 작업을 실행하여, I/O 완료 기다리면서 멈춘 상태
		WAITING		: 스레드가 어떤 객체에 대해 wait() 호출하여,
				 다른 누가 notify() 로 깨워줄때까지 무한정 기다리는 상태
		TERMINATED	: 스레드가 종료한 상태
