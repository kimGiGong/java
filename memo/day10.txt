[day10]

1. this 레퍼런스 
	1) new 객체 자기 자신을 가르키는 레퍼런스
		-> 현재 실행되고 있는 메소드가 속한 실객체에 대한 레퍼런스다.

	2) 인스턴스 메소드나 생성자에서 사용됨.
	3) this의 필요성
		#1. 지역변수나 매개변수와 인스턴스변수의 이름이 같을경우
			구별하려는 목적으로 사용
		#2. 메소드가 객체 자기자신의 레퍼런스를 리턴해야하는 경우 사용

2. this()  	---------	this메소드
	1) 클래스 안의 생성자가 다른 생성자를 호출 할 때 사용
	2) 생성자 안에서만 사용 가능
	3) 생성자 안에서 다른 생성자의 기능이 필요할 때 사용
	4) 생성자가 2개 이상일 경우 사용가능 ( 생성자 오버로딩 )
	5) 다른 생성자 호출시, 반드시 생성자의 첫번째 문장이 되어야한다.
	6) 코드 재사용성을 높이는 방법.

3. 객체 배열 
	1) 배열은 기본타입뿐만 아니라, 객체를 요소로 갖는 객체 배열도 만들수있다.
	2) 객체에 대한 레퍼런스 (주소)들을 데이터로 저장하는 배열

	3) 배열 선언 및 생성
		# 선언
		클래스명 [] 변수명;
		# 생성
		변수명 = new 클래스명[방갯수];

		# 단축
		클래스명 [] 변수명 = new 클래스명[방갯수];
		
		# 배열에 값 저장
		변수명[0]	= new 클래스명();
		
	4) 배열의 요소 객체에 접근 
		변수명[인덱스].멤버변수
		변수명[인덱스].인스턴스 변수

4. 객체의 소멸
	자바에서는 new 객체를 생성(메모리를 점유)하는 new 연산자는 있지만,
	객체를 소멸(메모리 해제)하는 연산자는 없다.
	대신 가비지 컬렉터가 적절한 시점에 자동으로 실행되어 메모리를 해제해준다.

5. 가비지 
	더이상 사용되지 않는 객체나 배열 메모리를 칭함.
	참조하는 레퍼런스가 하나도 없는 객체나 배열을 가비지로 판단.

	a = new Person("김피카츄");
	b = new Person("박꼬부기");

	b=a;	// 박꼬부기가 가비지가 된다.
	
	c = new Person("최라이츄");
	.....
	c=null;

6. 가비지 컬렉션 Garbage Collection 
	1) 정의
	할당된 메모리 중 더 이상 사용하지 않는 메모리를 자동으로 해제 해준다.
	더 이상 사용하지 않는 메모리란 : 어떠한 변수도 가르키지 않는 (가비지)

	Java에서 명시적으로 불필요한 데이터를 표현하기 위해서 null을 선언한다.
	
	가비지 컬렉션이 가동되면 JVM을 멈추고 실행되게 된다.
	
	2) 가동 시점
	JVM이 메모리가 부족해지면 OS에 추가 메모리를 요청할때

7. 접근지정자 modifier

	1) 객체 지향 언어는 접근지정자를 두고 있다.
		객체를 갭슐화 하기 때문에, 객체에 다른 객체가 접근하는것을
		허용할지 말지를 지정할 필요가 있기 때문
	
	2) 패키지 package
		자바는 서로 관련있는 클래스 파일들을 패키지에 묶어서 저장하여 관리함.
		패키지 : 디렉토리 or 폴더 개념
		
	3) 자바의 4가지 접근 지정자
		
		# 클래스 접근 지정자 : 다른 클래스에서 이 클래스를 활용할 수 있는지
					허용여부 지정
		
		1. public 클래스 		// 완전공개
			: 패키지에 상관없이 다른 어떤 클래스에서도 사용이 허용.
			public class 클래스명{......}

		2. default 클래스		// 같은 패키지만
			: 같은 패키지 내의 클래스들에게만 사용이 허용됨.
			class 클래스명 {.......}		// public 없음


		# 멤버(변수, 메소드) 접근지정자  
			: 이 멤버를 활용할 수 있는지 허용 여부
		
	-----------------------------------------------------------------------------------------------		 
	멤버에 접근하는 클래스	|	멤버 접근 지정자
				|    private      |      default     |   protected   |     public
	-----------------------------------------------------------------------------------------------
	같은 패키지의 클래스 	|        X	      |	   O	|         O        |	O
	-----------------------------------------------------------------------------------------------
	다른 패키지의 클래스	|        X	      |	   X	|         X         |	X	
	-----------------------------------------------------------------------------------------------
	접근 가능 영역 		|   클래스 안   |   동일패키지   | 동일패키지와 | 모든클래스
				|	      |	      	|   자식클래스  | 
	-----------------------------------------------------------------------------------------------


		1. public 멤버
			: 모든 클래스에서 접근 가능
		
			public 타입 변수명
			public 리턴 타입 메소드명() {........}

		2. private 멤버
			: 비공개 , 같은 클래스 안의 멤버들에게만 접근 허용
	
			private 타입 변수명
			private 리턴타입 메소드명 () {.......} 

		3. protected 멤버
			: 보호된 공개 , 같은 패키지의 모든 클래스와
			다른 패키지에 있어도 자식클래스라면 접근 허용
			-> 상속 유도

			protected 타입 변수명
			protected 리턴타입 메소드명() {........}

		4. default 멤버
			: 같은 패키지의 클래스들에게 접근 허용
		
			타입 변수명
			리턴타입 메소드() {.........}

	4) 캡슐화 encaptulation  :  자바가 지향하는 코드 스타일

		변수  : private 
		메소드 : public 

		데이터를 보관하는 변수에 접근하기 위해서는 
		메소드를 통해 우회접근하도록하여,
		데이터의 무분별한 공개를 막고, 적합한 가공과 검증을 통하여
		데이터에 접근하도록 유도하는 방법.
		
		getter / setter	: 외부에서 사용을 기준으로 생각하여 
		getter : 주로 가져와 사용하기에 리턴해주는 쪽으로 쓰게됨
		setter  : 주로 변수를 저장하는 쪽으로 사용하게됨
		
		get변수명(){} : 데이터 꺼내기
		set변수명(){} : 데이터 대입

		*** 변수명 첫글자 대문자로 !! ***	** 매우 중요 **

		private String name;
		public String get'N'ame() {
			return name;
		}
		public void set'N'ame(String name) {
			this.name = name;
		}


8. static 멤버 ( 재정리 ) 
	클래스 멤버 (변수, 메소드) 만들때 사용되는 키워드

	static 붙은 메소드,변수는 객체생성 없이 바로 사용할 수 있다.
	-> static 메소드는 static 멤버만 접근 할 수 있다.
	-> static 메소드는 this 키워드도 사용할 수 없다. 
		this는 new~ 로 객체생성해야 생기는 객체(레퍼런스)를 가르키므로







 