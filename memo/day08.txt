[day08]


클래스 : 변수 + 메소드

1. 메소드 method

	1) 메소드 : 함수
		어떠한 작업을 수행하기 위한 명령문들의 집합. main()도 메소드
		메소드 -> 연산을 처리하는 곳
		변수 -> 그 결과를 저장하는 곳
		메소드는 어떤 값을 입력받아 처리하고
		그 결과(하나만)를 돌려준다. (입력값, 리턴값 유/무)

		목적, 장점 : 재사용 : 반복적인 코드를 줄이고 코드 관리가 용이함.
		System.out.println();

	2) 메소드의 정의와 사용
				
		#1. 입력값X, 리턴값X
			# 정의
			리턴타입 메서드명( ) {
				실행할 코드들.....
			}
			
			# 사용(호출) 
			메소드명( );

		#2. 입력값O, 리턴값O
			# 정의
			리턴타입 메소드명( 타입 파라미터명, 타입 파라미터명, .... ) {
				실행 할 코드들.............
				return 값;
			}

			#사용
			변수 = 메소드명( 인자, 인자, ........ );
			
	3) 용어 정리
		리턴타입 : 메소드의 작성된 코드를 실행하고 리턴해주는 결과의 타입.
				모든타입이 될수있고, 리턴해줄게 없을때는 void 라고 작성.
		메소드명 : 변수명명규칙 참고 . 무슨 작업을 하는지 유추 가능한 이름으로 만들기.
		파라미터 : 매개변수, arguments
				메소드 실행할 때 외부에서 던져주는 데이터를 받아주는 변수
				메소드에 입력받을 값을 담아주는 변수
				외부에서 던져주는 값이 없으면 괄호안 비워두기
		return : 메소드를 호출한 곳으로 값을 돌려주는 키워드		
			1) 메소드를 종료시킴
			2) 뒤에 작성한 값을 호출한 곳으로 돌려줌			
			리턴타입이 void 아닌 이상 반드시 return 값이 있어야함.
			리턴타입과 return 뒤에 기입할 데이터의 타입이 동일해야함.
			void 타입에서도 어떤 조건에 의해 메소드가 중간에
			강제종료하고 싶을때는 return; 값없이 키워드만 사용가능.
		인자 : 매개변수, 인수, 인자값, 인수, 파라미터, arguments
			메소드 호출시, 메소드에게 던져줄 데이터를 말함.
			인자 -> 파라미터	( 인자가 파라미터안에 들어가는 것 )

		* 주의 !! 인자와 파라미터의 갯수/ 순서/데이터타입은 반드시 일치해야함.

	4) 메소드의 종류
		#1. 클래스 메소드 : static 붙힌 메소드
				객체 생성 안하고 사용가능
		#2. 인스턴스 메소드 : 일반 메소드
				객체 생성한 후 사용가능
			(같은 클래스 안에 있는 다른 메소드를 부를때는 객체생성 안해도된다.
			-> 메모리 생성 시기가 같아서 가능.	)
	
	5) main( ) 메소드
		public static void main(String[] args) {
			
		}


2. 메소드 인자 전달 방식

	자바의 인자 전달방식은 "값의 의한 호출 : Call-by-value" 이다.
	호출하는 곳에서의 인자값이 복사되어 파라미터에게 전달된다.

	1) 기본형 값 전달 : read only : 값만 복사해줌. 원본 훼손X
	2) 참조형 값 전달 : read & write : 객체의 레퍼런스(주소값)이 전달된다.


3. JVM 메모리 구조

	RAM OS가 관리
	JVM이 OS로부터 메모리 할당 받음 (Runtime Data Area)
	5개 영역, Class Area(=Method Area), Call Stack, Heap,
		Native Method Stack Area, PCregister

	1) Method Area : static이 붙어있는 것들의 영역
	2) Call Stack : 현재 실행중인 메소드들이 차지하는 메모리 영역
	3) Heap : new~ 로 생성되는 모든 것들
	4) Native : C/C++ 과 연동되는 작업을 함.

 		