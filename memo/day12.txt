[day12]

1. 상속과 생성자
	1) 서브와 수퍼클래스의 생성자 호출 및 실행
		서브클래스가 생성될때, 서브클래스의 생성자와 수퍼클래스 생성자 둘다 실행.
		-> 생성자의 목적은 객체의 초기화, 완성된 객체를 만들기 위해서는 둘다 필요.
		생성자 실행 순서 : 수퍼 -> 서브

	2) 서브클래스에서 수퍼클래스 생성자 선택
		부모클래스의 생성자가 여러개 있는경우,
		개발자가 부모생성자를 명시적으로 지정하지 않는 경우
		부모의 기본생성자를 호출 하도록 컴파일러가 실행시킴
		#1. 부모 클래스의 기본생성자가 자동으로 선택되는 경우
			자식클래스에서 부모 생성자를 명시적으로 부르지 않은 경우
			이때, 부모의 기본생성자가 없고 
			매개변수있는 생성자만 있을경우 ===	에러발생!!
		#2. 부모 생성자를 명시적으로 부르는 방법
			super( ) 를 이용하여 부모의 생성자를 명시적으로 선택해야함.
			자식 생성자안에서 super( ) 명령이 첫번쨰 명령이 되야함
			소괄호 안에 매개변수 넣어서 부모 생성자 선택가능


2. 오버라이드 override	*** 매우 중요 ***
	1) 상속관계에서 성립
	2) 재작성, 덮어씌우기 , 재정의 한다~~
		: 부모로부터 물려받은 메소드의 기능이 마음에 안들어
			내용물만 변경해서 사용하는 것.
	3) 메소드 선언부(헤드)는 똑같이 , 중괄호 영역 안에 내용물만 바꾸는 것
	4) 오버로딩 과는 완전히 다름
		오버로딩 : 같은이름의 여러개의 메소드를 만드는 것
		오버라이딩 : 안에 내용물만 수정 (재정의)
			(Object 클래스로부터 물려받은 equals() , toString() 같은 메소드는
			실제로 오버라이딩해서 주로 사용함)
	5) 동적바인딩 : 자식클래스에 오버라이딩된 메소드가 있으면,
		부모가 만든형태는 무시하고, 자식이 오버라이딩한 메소드가 무조건 실행된다.
	
	6) @Override : 어노테이션 (annotation)이라 부르며,
			메소드 바로 위에 붙혀서 컴파일러에게 
			오버라이딩이 정확한지 확인하도록 지시하는것.
			가독성을 높이고 , 개발자가 실수로 잘못작성하거나 오타를 방지할 수있다.
	7) 부모메소드의 접근지정자보다 접근의 범위를 좁혀서 오버라이딩 불가
		public > protected > default > private

		부모 protected -> 자식 오버라이딩 protected , public 
		부모 public -> 자식 오버라이딩 public 

	8) super : 부모 클래스의 레퍼런스를 가르킴. = 부모 클래스
		자식클래스에서 메소드 오버라이딩시,
		동적바인딩으로 오버라이딩된 메소드가 무조건 실행되는데,
		부모의 멤버(변수,메소드)를 호출하고자 할때 사용하는 키워드

	# this, super, this(), super()
		this. : 현재 객체 (나)가 가진 (내가 가진~)
		super. : 부모 객체가 가진
		this() : 현재 생성자에서 내 클래스의 다른 생성자 호출
		super() : 자식 생성자에서 부모생성자 호출


3. 다형성 polymorphism
	여러가지 형태를 가질 수 있는 능력
	상속관계에서 성립가능.
	참조형의 형변환.


4. instanceof 연산자
	참조하는 변수가 가르키는 실제 객체의 타입을 체크하는데 사용
	
	참조변수 instanceof 클래스명 --> true /false 로 결과 돌려줌		

	: 참조변수가 클래스의 객체 또는 자식 객체라면 true 돌려줌
	

5. 추상 클래스 
	1) 설계와 구현으로 분리한다면, 설계부분에 해당
	2) 키워드 : abstract
	3) 추상 메소드 : abstract 키워드를 붙혀 메소드의 선언부(원형)만 있고,
			구현은 되어있지 않은 형태 ( 중괄호 부분 없음 )
			
		public abstract String getName();

	4) 추상 클래스 : 일반 멤버(변수,메소드)들과 함께 추상 메소드를 포함하는 클래스
		추상 메소드가 하나라도 있으면 무조건 추상 클래스이다.
		추상클래스에는 abstract 키워드를 붙혀야 한다.

		abstract class Shape {	// 추상 클래스
			abstract void draw();	// 추상 메소드
			void func() { .... }		// 일반 메소드,변수도 갖고있다.
		}
	
	5) 추상 클래스로는 객체 생성 불가!!	불완전한/미완성인 클래스이므로 메모리에 올릴 수 없다.
		Shape s= new Shape(); --> ( X )
		Shape s; --> ( O ) 변수 선언만은 괜찮다.

	6) 상속에서 수퍼클래스로 사용된다. 부모 클래스 될 수 있다. ** extends 키워드로 상속가능. **
	
	7) 추상클래스를 물려받은 자식 클래스를 완성 시키려면
		추상메소드를 Override (내용물 구현) 해야한다.
		추상클래스를 단순히 상속만 받은 자식 클래스는 그 또한 추상클래스가 된다.

		# 추상 클래스 단순 상속 : 상속받은 추상 메소드 구현 안하면,
		abstract class Rect extends Shape {
			int width;
			
		}
		
		# 추상 클래스 상속 + 구현 -> 객체 생성 가능해짐
		class Rect extends Shape {
			int width;
			@Override
			void draw(){
				.......
			}
		}


	8) 추상 클래스를 상속받은 자식 클래스는 개발자들이 추상 메소드를 모두 구현해야함.
		-> 추상 클래스를 가이드라인,
			자식 클래스는 가이드를 따른 구현된 사용가능한 실제 클래스

6. 인터페이스 interface : 규격	 
	1) 키워드 : interface (class가 아님)
		키워드 사용해서 클래스를 선언하듯이 인터페이스를 선언

	2) 인터페이스 멤버는 추상메소드와 상수만으로 구성된다.
		interface Phone {
			public static final 타입 변수명 ; 	// 상수 : static 필수 (객체생성 X때문)
			public abstract 리턴타입 메소드명( ); 	// 추상메소드
		}

		interface Phone {				// 헤드 규격을 정해줄 있다.
			public static final int BUTTONS =20;
			public abstract void sendCall( );
			public abstract void receiveCall( );
		}
		
		*** 인터페이스 멤버는 어디서라도 접근 가능하게 모두 public으로 만듬.
	
	3) 모든 메소드는 public abstract 이며 생략가능하다.

	4) 상수는 public static final 타입이며 생략가능하다.
		
		interface Phone {				
			int BUTTONS =20;
			void sendCall( );
			void receiveCall( );
		}

	5) 인터페이스는 객체생성 불가!!
		메소드는 모두 구현안된 추상메소드이므로 미완성/불완전해 객체 생성 불가능	
	6) 인터페이스 타입의 변수 선언만은 가능
		Phone p = new Phone( ); --> X	
		Phone p; --> O

	7) 인터페이스 상속
		인터페이스는 다른 인터페이스를 상속 받을 수 있다.
		인터페이스는 규격과 같은 것으로, 상속을 통해
		기존 인터페이스에 새로운 규격을 추가한 새로운 인터페이스를 만들 수 있다.
		extends 키워드 사용
		
		interface Mobile extends Phone {	// BUTTONS, sendCall(); , receiveCall();
			void sendSMS();		// 규격 추가 (상수와 추상메소드가 추가됨)
			void receiveSMS();
		}
		## 인터페이스는 다중 상속 허용
		interface DualCameraPhone extends Mobile, Camera {
			void makeVideo();
		}

	8) 인터페이스 구현
		인터페이스의 추성 메서드를 모두 구현한 클래스를 작성하는 것
		키워드 : implements

		class IPhone implements Mobile {
			// 추상메소드 모두 구현
			public void sendCall () { ...... }
			public void receiveCall () { ...... }
			public void sendSMS () { ....... }
			public void receiveSMS () { ........ }
			// 추가적으로 일반 메소드, 변수선언
			public int doubleFingerTouch() {
				...........
			}
		}
		*** 추상 메소드 중 하나라도 구현을 안하면 에러 !!!
		
		

	9) 인터페이스의 목적
		다형성을 구성 하는 기능중 하나 
		Mobile m = new IPhone();	(부모)=(자식) 인셈
		
	10) 인터페이스의 다중 구현
		클래스는 하나 이상의 인터페이스 구현 가능.






















